<?xml version="1.0"?>
<!-- Example of ROS localization using the example aidboat with sensors -->
<launch>
  <!-- Publishes static joint transforms (lidar, cameras, etc) to /tf -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="rob_st_pub">
  </node>

  <!-- Publishes revolute joint static transforms (gps and imu) to /tf -->
  <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher">
    <param name="gui" value="false" />
  </node>

  <!-- Produces local odometry from GPS to be used in Kalman filter -->
  <node ns="aidboat/robot_localization" pkg="robot_localization" type="navsat_transform_node"
        name="navsat_transform_node" respawn="true" output="screen">     
    <param name="frequency" value="10"/>
    <param name="magnetic_declination_radians" value="0"/>
    <param name="broadcast_cartesian_transform" value="true"/>
    <param name="wait_for_datum" value="true"/>
    <param name="use_odometry_yaw" value="true"/>
    <rosparam param="datum">[21.30996, -157.8901]</rosparam>
    <param name="yaw_offset" value="0"/>
    <param name="publish_filtered_gps" value="true"/>
    <remap to="/aidboat/sensors/gps/fix" from="/aidboat/robot_localization/gps/fix" />
  </node>
</launch>

<!-- navsat_transfomr_node takes as input a nav_msgs/Odometry message (usually the output of ekf_localization), a sensor_msgs/Imu containing an accurate estimate of your robot's heading, and a sensor_msgs/NavSatFix message containing GPS data. It produces an odometry message in coordinates that are consistent with your robot's world frame. -->
<!--The GPs sensor sends its measurements on the topic name X, but the EKF node expects the messages of type Odometry on the topic name odo. 
To connect the GPs sensor with the filter node, we need to remap the topic name the node listens on-->